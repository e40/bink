#! /usr/bin/env bash

set -eu -o pipefail

prog="$(basename "$0")"

function errordie {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    exit 1
}

if ! brew=$(type -p brew); then
     errordie brew is not installed or in PATH
fi

prefix=$($brew --prefix)

realpath=$($brew --prefix coreutils)/bin/grealpath

function usage {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    cat 1>&2 <<EOF
Usage: $prog [--exec] [-q]

Print what Homebrew symlinks should be created in ${prefix}/bin/.
Homebrew already creates links for programs which do not conflict
with native macOS programs.  What this script does: symlink the
programs in
  ${prefix}/.../libexec/gnubin
into ${prefix}/bin/.

Command line args:

--exec  :: create the links printed
-q      :: do not print info about --exec
EOF
    exit 1
}

[ "$(uname -s)" = "Darwin" ] || errordie only runs on macOS

install=
quiet=

while [ $# -gt 0 ]; do
    case $1 in
        --exec)    install=$1 ;;
	-q)        quiet=$1 ;;
        *)         usage extra args: $* ;;
    esac
    shift
done

# setup admin user
if id -Gn "$USER" | grep -q -w admin; then
    admin=
else
    admin="admin@$(hostname -s)"
fi

# usage: x command args
#   Execute COMMAND with ARGS in the appropriate environment, which
#   is as user 'admin'.
function x {
    local execute=$install
    if [ "$1" = "--exec" ]; then
        execute=$1
        shift
    fi
    local command="$1"
    shift
    if [ "$execute" ]; then
        echo "+ $command $*"
        if [ ! "$admin" ]; then # execute directly
            "$command" "$@"
        else # use the admin credentials
            ssh -i "$HOME/.ssh/id_rsa_nopw" "$admin" "cd $PWD; $command" "$@"
        fi
    else
        echo "would: $command $*"
    fi
}

# so * expands to nothing if there are no matches
shopt -s nullglob

{
    cd "$prefix"

    x --exec "$brew" cleanup -v

    cd "${prefix}"
    read -a gnubins <<< "$(find . '(' -name bin -o -name gnubin ')' -print0 | xargs -0 echo)"

    dst=${prefix}/bin

    for gnubin in "${gnubins[@]}"; do
        progs=($gnubin/*)
        for f in "${progs[@]}"; do
	    base=$(basename "$f")
	    if [ -L "${dst}/$base" ] && [ ! -e "${dst}/$base" ]; then
	        # link is bad, so remove it
	        x rm -f "${dst}/$base"
	    fi

	    if [ -e "${dst}/$base" ]; then
                : # ignore
	    elif [ ! -L "${dst}/$base" ]; then
                # This is to make the symlinks relative
                target=$($realpath -s -m --relative-to="${dst}/" "${prefix}/$f")
	        x ln -s "${target}" "bin/$base"
	    fi
        done
    done

    if [ ! "$install" ] && [ ! "$quiet" ]; then
	echo ""
	echo "To execute the above commands do: $prog --exec"
    fi
    exit 0
}
