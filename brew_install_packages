#! /usr/bin/env zsh
# Use zsh because the native BASH on macOS is too old to
# run this script.

set -eu
set -o pipefail

prog="$(basename "$0")"

function usage {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    cat 1>&2 <<EOF
Usage: $prog [--clean]
Usage: $prog --list

Install Homebrew packages.  To list packages 
use --list.

Options:
--clean   :: clean up after installation
EOF
    exit 1
}

function errordie {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    exit 1
}

type -p brew > /dev/null || errordie Homebrew is not installed

function d {
    echo "+ $*"
    "$@"
}

packages_with_options=()

host=$(hostname -s)

brew="brew"
if id -Gn "$USER" | grep -q -w admin; then
    manager=$brew
elif [ -f "$HOME/.ssh/id_rsa_nopw" ]; then
    manager=(ssh -i $HOME/.ssh/id_rsa_nopw admin@$host ${brew})
else # assume SSH works to admin@...
    manager=(ssh admin@$host ${brew})
fi

# You can see what you have installed via these commands:
#   brew leaves --installed-on-request
#   brew ls --casks

packages=(
    autossh bash coreutils curl diffutils dos2unix duti findutils
    findutils gcc git gnu-getopt gnu-sed gnu-tar grep jq lsof moreutils
    ncdu openssh p7zip perl python rclone rsync shellcheck smartmontools
    sqlite telnet wget xmlstarlet zlib

    # for knocking:
    #fwknop ...... now installed from source code
    1password-cli

    # too useful, but oy vey, the security implications!
    node npm

    # like inotifywait
    fswatch

    # cool commands to learn about other commands
    cheat tldr

    # the screen with macOS sucks
    screen

    # procmail is for lockfile
    procmail

    # mailx-like package
    s-nail

    # Needed for SOC 2
    clamav

    # for M-x ispell
    ispell

    # `watch progress -q` is a nice way to watch the bandwidth used
    # by `cp`.
    progress watch

    # these are for building packages from source (e.g., fwknop)
    autogen autoconf automake texinfo

#####TODO:
    # not sure these are needed
    libev
    openjdk

##### can probably remove:
    wakeonlan
)

pipx_packages=()

npm_packages=()

if [[ $host =~ (max|mini18) ]]; then
    packages+=(
        yt-dlp
    )
fi

if [[ $host =~ (max) ]]; then

    packages+=(
        # For offsite backup, but I use rclone not this package for it.
        # It is handy for certain operations, though.
        b2-tools

        # photography tools used by various scripts
        imagemagick exiftool

        # used to convert org/markdown files to PDFs
        mactex pandoc

        # https://tclementdev.com/timemachineeditor/
        timemachineeditor

        # for Fujitsu ix500 scanner
        homebrew/cask/fujitsu-scansnap-home

        # for osxphotos (see below)
        pipx

        # ebook reader
        calibre

        # see below for install with options, but I don't really need that??
        ffmpeg

        # for emacs ready-player
        ffmpegthumbnailer

        # used by bink/diffdocx
        diff-pdf

        # for photos and tget
        sqlite-utils
        sqldiff

        # useful for archiving iMessage data
        imessage-exporter 

        # OCaml package manager... `opam list --installed` to see what is
        # there.  I don't remember installing any of that stuff.
        opam
    )
    npm_packages+=(
        # https://github.com/sindresorhus/one-thing CLI for the One Thing app
        one-thing
    )

    pipx_packages+=(
        # https://rhettbull.github.io/osxphotos/
        osxphotos
    )
fi

##### too big and I don't really use it much
#if [[ $host =~ (max|mini18) ]]; then
#    # ffmpeg with improved AAC codec
#    packages_with_options+=("homebrew-ffmpeg/ffmpeg/ffmpeg --with-fdk-aac")
#fi

###############################################################################

clean=
list=

while [ $# -gt 0 ]; do
    case $1 in
        --help)  usage ;;
        --clean) clean=$1 ;;
        --list)  list=$1 ;;
        *)       break ;;
    esac
    shift
done

if [ "$list" ]; then
    for p in "${packages[@]}"; do echo $p; done
    for p in "${packages_with_options[@]}"; do echo $p; done
    exit 0
fi

{
    d "${manager[@]}" analytics off
    d "${manager[@]}" update
    d "${manager[@]}" upgrade

    d "${manager[@]}" install "${packages[@]}"
    for package_with_options in "${packages_with_options[@]}"; do
        d "${manager[@]}" install $package_with_options
    done

    [ "${#npm_packages[@]}" -gt 0 ] && d npm install -g "${npm_packages[@]}"
    [ "${#pipx_packages[@]}" -gt 0 ] && d pipx install "${pipx_packages[@]}"

    [ "$clean" ] && d "${manager[@]}" cleanup
    exit 0
}
