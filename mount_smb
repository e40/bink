#! /bin/bash
# On Mac OS X, mounts an SMB volume over an SSH tunnel.
# For more info, see the usage below.
#
###############################################################################
# Defaults with command-line overrides

# Initialize defaults from init file, if there is one:
[ -f $HOME/.mount_smb ] && source $HOME/.mount_smb

# The host to which we connect to create the tunnel:
: ${sshhost:=}

# The workgroup:
: ${workgroup:=}

# The host with the SMB shares we want to mount:
: ${smbhost:=}

# The name of the SMB share you want to mount:
: ${folder:=}

# The name of the local, mounted volume:
: ${mountpoint:=}

# Assume the local and remote users are the same:
: ${remoteuser:=$USER}

# The SSH config to use
: ${sshconfig:=$HOME/.ssh/config}

###############################################################################
set -eu

function usage {
    if test -n "${*-}"; then
	echo "Error: $*" 1>&2
    fi
    cat 1>&2 <<EOF
Usage: mount_smb [--debug] [--mount mountpoint] [--user remote-user]
                 [--sshconfig configfile]
                 --sshhost sshhost --smbhost smbhost
                 --folder folder_to_mount --workgroup workgroup

On Mac OS X, mount an SMB share via an SSH tunnel.

The script pauses in the middle to let you use the volume,
then when you continue it dismounts and shuts down the tunnel.

Multiple instances of this script can run at a time, since each one
uses a new, local device and maps local ports 139 and 445 for that
device to the remote machine.

/etc/sudoers can be augmented, for easier operation.  Add these lines
to the end with the "visudo" command:
   USER ALL=(ALL) NOPASSWD: /sbin/ifconfig lo0 *
   USER ALL=(ALL) NOPASSWD: /usr/bin/ssh
where "USER" is replaced with the name of the user executing mount_smb.

This script has been tested on Mac OS X 10.9.

Optional arguments:
 --mount mountpoint     :: defaults to /Volumes/\$smbhost
 --user remote-user     :: defaults to \$USER
 --sshconfig configfile :: defaults to \$HOME/.ssh/config

Required arguments:
 --sshhost smbhost      :: the SSH host, or the other end of the tunnel
 --smbhost smbhost      :: the SMB host, which is accessible to the SSH host.
                           The SMB host can be different than the SSH host.
 --workgroup workgroup  :: the SMB workgroup
 --folder folder        :: the SMB folder to mount

You can initialize the following command line arguments from
the script \$HOME/.mount_smb.  The command line to variable name mapping
is:
   --sshconfig sshconfig
   --mount     mountpoint
   --user      remoteuser
   --sshhost   sshhost
   --smbhost   smbhost
   --folder    folder
   --workgroup workgroup

Lastly, if a BASH function named "mount_smb_post_mount" is defined,
perhaps in \$HOME/.mount_smb or \$HOME/.bashrc, then it is called 
post-mount, with arguments these arguments:

    mount_smb_post_mount "\$mountpoint" "\$smbhost" "\$folder"

This can be used to do post-mount things, like displaying a particular
folder with the Finder.  For example:

# When mounting folder "john" on host "linuxhost", open the "incoming"
# subdirectory in the Finder.
function mount_smb_post_mount {
    local mountpoint=\${1-}
    local smbhost=\${2-}
    local folder=\${3-}
    case "\$smbhost" in
	linuxhost) [ "\$folder" = "john" ] && open \$mountpoint/incoming ;;
    esac
}
EOF
    exit 1
}

function errordie {
    if test -n "${*-}"; then
	echo "Error: $*" 1>&2
    fi
    exit 1
}

debug=

while test $# -gt 0; do
    case $1 in
	--debug)     debug=$1             ;;
	--sshhost)   sshhost=$2;    shift ;;
	--sshconfig) sshconfig=$2;  shift ;;
	--smbhost)   smbhost=$2;    shift ;;
	--folder)    folder=$2;     shift ;;
	--mount)     mountpoint=$2; shift ;;
	--workgroup) workgroup=$2;  shift ;;
	--user)      remoteuser=$2; shift ;;
	--help) usage ;;
	-*)     usage ;;
	*)      usage ;;
    esac
    shift
done

[ "$sshhost" ] || usage sshhost is not set, use --sshhost 
[ "$smbhost" ] || usage smbhost is not set, use --smbhost 
[ "$folder" ] || usage folder is not set, use --folder 
[ "$workgroup" ] || usage workgroup is not set, use --workgroup 

[ "$mountpoint" ] || mountpoint=/Volumes/$smbhost

# Leave here for debugging:
: cat <<EOF
Parameters:
  sshhost=$sshhost
  workgroup=$workgroup
  smbhost=$smbhost
  folder=$folder
  mountpoint=$mountpoint
  remoteuser=$remoteuser
  sshconfig=$sshconfig
EOF

###############################################################################

ifconfig=/sbin/ifconfig

function find_device {
    # Find the first unused lo0 IP address.
    local max=$(/sbin/ifconfig lo0 | \
		       grep "inet " \
		       | sed -e 's/.*inet 127\.0\.0\.//g' \
			     -e 's/ netmask.*//g' | \
		       sort -n | tail -1)
    echo 127.0.0.$(( $max + 1 ))
}

if device=$(find_device); then
    if [ ! "$device" ]; then
	usage Could not find device
    fi
else
    usage Could not find device
fi

function read_encoded_password {
    local pass
    [ "${EMACS-}" ] || stty -echo
    read -p "Password:" -s pass
    [ "${EMACS-}" ] || stty echo
    python -c "import sys, urllib as ul; print ul.quote(\"$pass\")"
}

# This file is removed by ssh once the control socket is shutdown
socket=/tmp/smbtunnel$$

function start_tunnel {
    sudo ssh $USER@$sshhost -F $sshconfig \
	 -f -N -M -S $socket \
	 -L ${device}:139:${smbhost}:139 \
	 -L ${device}:445:${smbhost}:445
}

function stop_tunnel_and_cleanup {
    if ! umount $mountpoint; then
	echo umount $mountpoint failed
    fi
    # Give the volume time to unmount:
    sleep 2
    if [ -d $mountpoint ]; then
	# Only true if there was an error, I beleive.  Under normal
	# conditions, umount removes the directory.
	if ! rmdir $mountpoint; then
	    echo rmdir $mountpoint failed
	fi
    fi
    if ! sudo $ifconfig lo0 ${device} -alias down; then
	echo $ifconfig -alias down failed
    fi
    # do this last (so no need to error protect it)
    sudo ssh $USER@$sshhost -F $sshconfig -S $socket -O exit
}

sudo $ifconfig lo0 ${device} alias up

start_tunnel
trap "stop_tunnel_and_cleanup" 0

echo Waiting for tunnel to initialize
sleep 5

mkdir -p $mountpoint

function mountit {
    echo "Enter your password for the SMB share \"$folder\""
    pass="$(read_encoded_password)"
    printf '\n'

    /sbin/mount_smbfs \
	"//${workgroup};${remoteuser}:${pass}@${device}/${folder}" \
	$mountpoint
}

# Do this in a loop, in case the user types the password incorrectly.
while ! mountit; do
    :
done

# Open a Finder on it
open $mountpoint

# If a function named "mount_smb_post_mount" was defined in
# $HOME/.mount_smb (or possibly in $HOME/.bashrc), then call it.
# It can be used to do post-mount things, like displaying a particular
# folder with the Finder.
if [ "$(type -t mount_smb_post_mount)" = "function" ]; then
    mount_smb_post_mount "$mountpoint" "$smbhost" "$folder"
fi

cat <<EOF
When you are done with the share, press ENTER and it will be unmounted
EOF
read foo

# the cleanup is done in the trap handler
