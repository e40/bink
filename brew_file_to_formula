#! /usr/bin/env bash

set -ueE -o pipefail

prog="$(basename "$0")"

function usage {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    cat 1>&2 <<EOF
Usage: $prog path1 [path2 [path3 ...]]

Take a program's path and say what formula installed it.  For example:

    \$ $0 \$(which grep) \$(which ls)

It's not fast, but it works.  It takes constant time for any number of
argument paths, however.

I believe the bottleneck is in the "brew list" command for each formula.

EOF
    exit 1
}

function errordie {
    [ "${*-}" ] && echo "$prog: $*" 1>&2
    exit 1
}

verbose=

while [ $# -gt 0 ]; do
    case $1 in
        --verbose) verbose=$1 ;;
        --)        ;;
        *)         break ;;
    esac
    shift
done

[ $# -eq 0 ] && usage "missing arguments"

tempfile="/tmp/${prog}temp1$$"
tempfile2="/tmp/${prog}temp2$$"
rm -f "$tempfile"
rm -f "$tempfile2"
# shellcheck disable=SC2317
function exit_cleanup {
    rm -f "$tempfile"
    rm -f "$tempfile2"
}
# shellcheck disable=SC2317
function err_report {
    echo "Error on line $(caller)" 1>&2
}
trap err_report   ERR
trap exit_cleanup EXIT

{
declare -A file_to_package

[ "$verbose" ] && echo "Gather info on installed formulas..."
brew list --formula > "$tempfile"

while read -r formula; do
    [ "$verbose" ] && echo "list files for $formula..."
    brew list --formula "$formula" > "$tempfile2"
    while read -r file; do
        file_to_package[$file]=$formula
    done <<< "$(cat "$tempfile2")"
done <<< "$(cat "$tempfile")"
[ "$verbose" ] && echo "Gather info on installed formulas...done."
[ "$verbose" ] && echo ""

for p in "$@"; do
    path=$(realpath "$p")
    if [ "${file_to_package[$path]-}" ]; then
        echo "$p: ${file_to_package[$path]}"
    else
        errordie "File not provided by Homebrew"
    fi
done
exit 0
}
